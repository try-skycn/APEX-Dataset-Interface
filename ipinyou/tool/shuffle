#!/usr/bin/env python3
import random, math, subprocess, numpy as np
from h5py import File
import os.path

def dynamic_print(i, end=False):
	s = str(i)
	if end:
		print("\033[K" + s)
	else:
		print("\033[K" + s, end='\033[{}D'.format(len(s)), flush=True)

def line_generator(dset, start, end, buffer_size=1000000):
	for l in range(start, end, buffer_size):
		yield from dset[l:min(l + buffer_size, end)]

def shuffle_line_generator(fromdset):
	start, mid, end = 0, fromdset.shape[0] // 2, fromdset.shape[0]
	gens = [line_generator(fromdset, start, mid), line_generator(fromdset, mid, end)]
	sizes = [mid - start, end - mid]
	while sizes[0] + sizes[1] > 0:
		logit = int(random.random() * (sizes[0] + sizes[1]) < sizes[1])
		yield next(gens[logit])
		sizes[logit] -= 1

def shuffle_loop(fromdset, todset, buffer_size=1000000):
	start, end = 0, fromdset.shape[0]
	buf = np.zeros([buffer_size, *fromdset.shape[1:]])
	gen = shuffle_line_generator(fromdset)
	for l in range(start, end, buffer_size):
		r = min(l + buffer_size, end)
		for i in range(r - l):
			buf[i] = next(gen)
		todset[l:r] = buf[:r-l]

def shuffle(fromdset, todset, tmpfile="/tmp/shuffle_tmp.h5"):
	ftmp = File(tmpfile, "w")
	leftdset = ftmp.create_dataset("left", fromdset.shape, dtype=fromdset.dtype)
	rightdset = ftmp.create_dataset("right", fromdset.shape, dtype=fromdset.dtype)
	dsets = [leftdset, rightdset]
	print("Copying origin dataset to tmp dataset ...")
	leftdset[:] = fromdset[:]
	for i in range(int(math.log(fromdset.shape[0], 2)) + 2):
		dynamic_print(i)
		shuffle_loop(dsets[i % 2], dsets[(i + 1) % 2])
	dynamic_print(i, True)
	print("Copying tmp dataset to dest dataset")
	todset[:] = dsets[(i + 1) % 2][:]
	ftmp.close()
	subprocess.run(["rm", tmpfile])

def shuffle_dset(infile, dsetname, outfile):
	fin = File(infile, "r")
	assert dsetname in fin.keys(), "Dataset {} is not in file {}".format(dsetname, infile)
	fout = File(outfile, "w")
	for k in fin.attrs.keys():
		print("Copying attribute {} ...".format(k))
		fout.attrs[k] = fin.attrs[k]
	for k in fin.keys():
		if k != dsetname:
			print("Copying dataset {} ...".format(k))
			dset = fout.create_dataset(k, fin[k].shape, dtype=fin[k].dtype)
			dset[:] = fin[k][:]
	print("Copying shuffled dataset {} ...".format(dsetname))
	fromdset = fin[dsetname]
	todset = fout.create_dataset(dsetname, fromdset.shape, dtype=fromdset.dtype)
	shuffle(fromdset, todset)
	fin.close()
	fout.close()

import argparse
parser = argparse.ArgumentParser()
parser.add_argument("infile")
parser.add_argument("dsetname")
parser.add_argument("outfile")
args = parser.parse_args()

try:
	shuffle_dset(args.infile, args.dsetname, args.outfile)
except KeyboardInterrupt:
	print("Stop.")
	if os.path.exists(args.outfile):
		subprocess.run(["rm", args.outfile])

